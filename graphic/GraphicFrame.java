/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package strategypatern.graphic;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import strategypatern.Context;

/**
 *
 * @author anthony
 */
public class GraphicFrame extends javax.swing.JFrame implements ActionListener {
    
    Context context;

    /**
     * Creates new form MainFrame
     */
    public GraphicFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        strategyButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        nextValList = new javax.swing.JList<>();
        currentVal = new javax.swing.JLabel();
        strategyPanel = new javax.swing.JPanel();
        fcfsButton = new javax.swing.JRadioButton();
        sstfButton = new javax.swing.JRadioButton();
        sdButton = new javax.swing.JRadioButton();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        elevator = new javax.swing.JSlider();
        generatorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nextValList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(nextValList);

        currentVal.setText("jLabel1");

        strategyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Strategy"));

        strategyButtonGroup.add(fcfsButton);
        fcfsButton.setSelected(true);
        fcfsButton.setText("First Come First Serve");
        fcfsButton.setName("fcfs"); // NOI18N
        fcfsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcfsButtonActionPerformed(evt);
            }
        });

        strategyButtonGroup.add(sstfButton);
        sstfButton.setText("Shortest Seek Time First");
        sstfButton.setName("sstf"); // NOI18N

        strategyButtonGroup.add(sdButton);
        sdButton.setText("Scan Disk (Elevator)");
        sdButton.setName("sd"); // NOI18N

        javax.swing.GroupLayout strategyPanelLayout = new javax.swing.GroupLayout(strategyPanel);
        strategyPanel.setLayout(strategyPanelLayout);
        strategyPanelLayout.setHorizontalGroup(
            strategyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(strategyPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(strategyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sdButton)
                    .addComponent(sstfButton)
                    .addComponent(fcfsButton)))
        );
        strategyPanelLayout.setVerticalGroup(
            strategyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(strategyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fcfsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sstfButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sdButton)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        runButton.setText("Run");

        stopButton.setText("Stop");

        elevator.setMajorTickSpacing(2);
        elevator.setMaximum(20);
        elevator.setMinimum(1);
        elevator.setMinorTickSpacing(1);
        elevator.setOrientation(javax.swing.JSlider.VERTICAL);
        elevator.setPaintLabels(true);
        elevator.setPaintTicks(true);
        elevator.setAutoscrolls(true);
        elevator.setCursor(new java.awt.Cursor(java.awt.Cursor.W_RESIZE_CURSOR));

        generatorButton.setText("Generator");
        generatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(elevator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(runButton)
                                    .addComponent(strategyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stopButton)))
                            .addComponent(currentVal))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(generatorButton)
                        .addGap(76, 76, 76))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(elevator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentVal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(strategyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generatorButton)
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fcfsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcfsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fcfsButtonActionPerformed

    private void generatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatorButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generatorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphicFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentVal;
    private javax.swing.JSlider elevator;
    private javax.swing.JRadioButton fcfsButton;
    private javax.swing.JButton generatorButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> nextValList;
    private javax.swing.JButton runButton;
    private javax.swing.JRadioButton sdButton;
    private javax.swing.JRadioButton sstfButton;
    private javax.swing.JButton stopButton;
    private javax.swing.ButtonGroup strategyButtonGroup;
    private javax.swing.JPanel strategyPanel;
    // End of variables declaration//GEN-END:variables

    public void initElement(Context context, int minVal, int maxVal){
        this.context =  context;
        currentVal.setText(String.valueOf(context.getCurrentPos()));
        nextValList.setListData(this.toStringList(context.getNextPosList()));
        elevator.setMinimum(minVal);
        elevator.setMaximum(maxVal);
        elevator.setValue(context.getCurrentPos());
        runButton.setEnabled(true);
        runButton.addActionListener(this);
        stopButton.setEnabled(false);
        generatorButton.addActionListener(this);
        stopButton.addActionListener(this);
        fcfsButton.addActionListener(this);
        sstfButton.addActionListener(this);
        sdButton.addActionListener(this);
        this.context.setStrategy(this.getSelectedButtonText(strategyButtonGroup));
    }
    
    public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getName();
            }
        }
        return null;
    }
    
    public void updateElement(Context context){
        context.getMF().currentVal.setText(String.valueOf(context.getCurrentPos()));
        nextValList.setListData(this.toStringList(context.getNextPosList()));
        elevator.setValue(context.getCurrentPos());
        
        currentVal.revalidate();
        nextValList.revalidate();
        elevator.revalidate();
    }
        
    private String[] toStringList(int[] list){
        String[] tmp= new String[list.length];
        for(int l=0; l<list.length; l++){
            tmp[l] = Integer.toString(list[l]);
        }
        return tmp;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
    if (src == runButton) {
        runButton.setEnabled(false);
        stopButton.setEnabled(true);
            try {
                this.context.start();
            } catch (InterruptedException ex) {
                Logger.getLogger(GraphicFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

    } else if (src == stopButton) {
        stopButton.setEnabled(false);
        runButton.setEnabled(true);
        this.context.stop();
    }else if (src ==fcfsButton || src==sstfButton || src==sdButton) {
        this.context.setStrategy(this.getSelectedButtonText(strategyButtonGroup));
    }else if (src == generatorButton ) {
        this.context.generateList();
    }
    }
}
